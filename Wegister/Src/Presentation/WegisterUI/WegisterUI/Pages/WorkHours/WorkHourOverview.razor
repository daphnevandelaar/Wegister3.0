@page "/uren"

@using WebUI.Dtos
@using Application.Common.Viewmodels
@using WegisterUI.Services
@inject WorkHourService _workHourService
@inject NavigationManager _uriHelper

<AuthorizeView>
    <Authorized>
        <h1>Urenoverzicht</h1>

        <p>Het onderstaande overzicht is een lijst met de geregistreerde uren</p>
        <FilterDropdown FilterValues="filterValues" OnItemSelected="FiltersSelected"></FilterDropdown>
        <div class="container-overview">
            <div class="container-filter">
                @if (_filters != null)
                {
                    @foreach (var filter in _filters)
                    {
                        if (filter.FilterValues != null)
                        {
                            <div class="dropdown">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @filter.Name
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <a class="dropdown-item" style="cursor: pointer;" @onclick='() => FilterOnWorkHours(filter.Type, "Alles")'>Alles</a>
                                    @foreach (var item in filter.FilterValues)
                                    {
                                        <a class="dropdown-item" style="cursor: pointer;" @onclick="() => FilterOnWorkHours(filter.Type, item.Value)">@item.Value</a>
                                    }
                                </div>
                            </div>
                        }
                    }
                }
            </div>
            <div class="container-action">
                <button class="btn btn-primary" @onclick=@Navigate>Uren registreren</button>
            </div>
        </div>

        @{
            var totaalUren = _uren?.TotalAmountOfWorkHoursInMinutes / 60;
            var overgeblevenMinuten = _uren?.TotalAmountOfWorkHoursInMinutes % 60;
        }

        <div class="container-details">
            Totaalgewerkt: @totaalUren:@overgeblevenMinuten
        </div>

        @if (_uren == null)
        {
            <p><em>Er zijn geen uren geregistreerd</em></p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Klant</th>
                        <th>Datum</th>
                        <th>Starttijd</th>
                        <th>Eindtijd</th>
                        <th>Pauze in min.</th>
                        <th>Totaal uren</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var gewerktuur in _uren.WorkHours)
                    {
                        { _dataTarget += gewerktuur.Id; }

                        var totaalUrenPerDag = gewerktuur.TotalWorkHoursInMinutes / 60;
                        var overgeblevenMinutenPerDag = gewerktuur.TotalWorkHoursInMinutes % 60;

                        <tr>
                            <td data-toggle="collapse" data-target="#@_dataTarget" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">@gewerktuur.CustomerName</td>
                            <td data-toggle="collapse" data-target="#@_dataTarget" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">@gewerktuur.Date</td>
                            <td data-toggle="collapse" data-target="#@_dataTarget" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">@gewerktuur.StartTime</td>
                            <td data-toggle="collapse" data-target="#@_dataTarget" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">@gewerktuur.EndTime</td>
                            <td data-toggle="collapse" data-target="#@_dataTarget" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">@gewerktuur.RecreationInMinutes</td>
                            <td data-toggle="collapse" data-target="#@_dataTarget" aria-expanded="false" aria-controls="collapseExample" style="cursor: pointer;">@totaalUrenPerDag:@overgeblevenMinutenPerDag</td>
                            <td style="padding: 0; vertical-align: middle;">
                                @*<span class="fas fa-trash red text-18 pointer hover" aria-hidden="true" @onclick='() => Delete(gewerktuur.Id)'></span>*@
                            </td>
                        </tr>
                        <tr class="collapse" id="@_dataTarget" style="background-color: rgb(255, 255, 255);">
                            <td colspan="6">
                                <div class="card-body">
                                    @gewerktuur.Description
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>Je bent niet geauthorizeerd deze pagina te bekijken...</p>
        <p><a href="identity/account/login">Klik hier</a> om in te loggen of neem contact op met beheerder.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private WorkHourListVm _uren;
    private List<FilterValueListVm> _filters;
    private List<FilterValue> filterValues = new()
    {
        new(){ Id = 1, Value = "Tst" },
        new(){ Id = 2, Value = "Hallo" },
        new(){ Id = 3, Value = "Doei" },
        new(){ Id = 4, Value = "Houdoe" }
    };

    protected async Task FiltersSelected(List<FilterValue> values)
    {
        var tst = values;
    }

    private string _dataTarget = "toggle";

    protected override async Task OnInitializedAsync()
    {
        _filters = await _workHourService.GetFilters(null, null);
        _uren = await _workHourService.GetWorkHours();
    }

    void Navigate()
    {
        _uriHelper.NavigateTo("uren/toevoegen");
    }

    private List<FilterValueListDto> _selectedFilters = new();

    async void FilterOnWorkHours(string filterType, string value)
    {
        _filters = _filters
            .Select(f =>
            {
                f.Type = f.Type;
                f.Name = f.Type == filterType ? value : f.Name;
                f.FilterValues = f.FilterValues;
                return f;
            })
            .ToList();

        _selectedFilters ??= new();
        _selectedFilters = _selectedFilters?.Where(f => f.Type != filterType).ToList();

        _selectedFilters?.Add(
            new FilterValueListDto
            {
                Type = filterType,
                FilterValue = new FilterValueDto
                {
                    Value = value
                }
            }
        );

        _uren = await _workHourService.SearchHours(_selectedFilters);

        _filters = await _workHourService.GetFilters(filterType, value);
    }

    async void Delete(int id)
    {
        _workHourService.DeleteWorkHour(id);
        _uren = await _workHourService.GetWorkHours();
    }
}